package utility;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class EquationList {
	
	private static Stack<String> _equations = new Stack<String>();
	private static Stack<Integer> _answers = new Stack<Integer>();
	private static List<String> _questionLog = new ArrayList<String>();
	private static List<Integer> _answerLog = new ArrayList<Integer>();
	private static List<Boolean> _userAnswerLog = new ArrayList<Boolean>();
	private static boolean _hardMode = false;
	
	
	
	/**
	 * Generates an atomic equation
	 * @param max the maximum value that the equation can equal
	 * @return a string array, where the first member is the equation,
	 * and the second member is the answer
	 */
	private static String[] generateAtomic(int max) {
	
		String eq = "";
		int ans = 0;
		
		int a;
		int b;
		
		switch (new java.util.Random().nextInt(4)) {
		// +
		case 0:
			a = new java.util.Random().nextInt(max - 1) + 1;
			b = new java.util.Random().nextInt(max - a) + 1;
			eq = a + " + " + b;
			ans = a + b;
			break;
		// -
		case 1:
			a = new java.util.Random().nextInt(max - 1) + 2;
			b = new java.util.Random().nextInt(a - 1) + 1;
			eq = a + " - " + b;
			ans = a - b;
			break;
		// x
		case 2:
			a = new java.util.Random().nextInt((int)(max / 2)) + 1;
			b = new java.util.Random().nextInt(max / a) + 1;
			eq = a + " X " + b;
			ans = a * b;
			break;
		// /
		case 3:
			a = new java.util.Random().nextInt((int)(max / 2)) + 1;
			b = new java.util.Random().nextInt(max / a) + 1;
			eq = (a*b) + " / " + b;
			ans = a;
			break;
		}
		
		String[] returnVal = {eq,Integer.toString(ans)};
		return returnVal;
		
	}
	
	
	/**
	 * Generates a set of hard questions. "Hard" questions are those
	 * that have two parts, i.e are not atomic
	 * @param length the number of questions to generate
	 */
	public static void generateHard(int length) {
		
		
		_hardMode = true;
		
		// Clear to ensure _numbers & logs don't have any pre-existing members
		_equations.clear();
		_answers.clear();
		_userAnswerLog.clear();
		_answerLog.clear();
		_questionLog.clear();
		
		
		for (int i = 0; i < length; i++) {
			
			String[] a;
			int ans = 0;
			String eq = "";
			String[] b;
			
			// Each question is generated by combining 2 atomic equations,
			// either with +, -, or X
			switch (new java.util.Random().nextInt(3)) {
			// +
			case 0:
				a = generateAtomic(90);
				b = generateAtomic(99 - Integer.parseInt(a[1]));
				eq = "(" + a[0] + ")" + " + " + "(" + b[0] + ")";
				ans = Integer.parseInt(a[1]) + Integer.parseInt(b[1]);
				break;
			// -
			case 1:
				a = generateAtomic(98);
				if (Integer.parseInt(a[1]) <= 2) {
					int alt = new java.util.Random().nextInt(97) + 3;
					a[0] = Integer.toString(alt);
					a[1] = Integer.toString(alt);
				}
				b = generateAtomic(Integer.parseInt(a[1]) - 1);
				eq = "(" + a[0] + ")" + " - " + "(" + b[0] + ")";
				ans = Integer.parseInt(a[1]) - Integer.parseInt(b[1]);
				break;
			// x
			case 2:
				a = generateAtomic(49);
				b = generateAtomic(99 / Integer.parseInt(a[1]));
				eq = "(" + a[0] + ")" + " X " + "(" + b[0] + ")";
				ans = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);
				break;	
			}				

			// Save this question and its answer
			_equations.push(eq);
			_answers.push(ans);
			
			
		}
		
	}

}
